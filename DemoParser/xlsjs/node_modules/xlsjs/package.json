{
  "name": "xlsjs",
  "version": "0.4.0",
  "author": {
    "name": "Niggler"
  },
  "description": "(one day) a full-featured XLS parser and writer.  For now, primitive parser",
  "keywords": [
    "xls",
    "office",
    "excel",
    "spreadsheet"
  ],
  "bin": {
    "xls2csv": "./bin/xls2csv.njs"
  },
  "main": "./xls",
  "dependencies": {
    "commander": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Niggler/js-xls.git"
  },
  "bugs": {
    "url": "https://github.com/Niggler/js-xls/issues"
  },
  "engines": {
    "node": ">=0.4"
  },
  "readme": "# xls\n\nCurrently a parser for XLS files.  Cleanroom implementation from the Microsoft Open Specifications.\n\nThis has been tested on some basic XLS files generated from Excel 2011 (using compatibility mode).\n\n*THIS WAS WHIPPED UP VERY QUICKLY TO SATISFY A VERY SPECIFIC NEED*.  If you need something that is not currently supported, file an issue and attach a sample file.  I will get to it :)\n\n## Installation\n\nIn the browser:\n\n    <script src=\"xls.js\"></script>\n\nIn node:\n\n    require('xlsjs').readFile('file');\n\nThe command-line utility `xls2csv` shows how to generate a CSV from an XLS.\n\n## Usage\n\nSee http://niggler.github.com/js-xls/ for a browser example.\n\nSee `bin/xls2csv` for a node example.\n\n## Notes\n\n`CFB` refers to the Microsoft Compound File Binary Format, a container format for XLS as well as DOC and other pre-OOXML data formats.\n\nThe mechanism is split into a CFB parser (which scans through the file and produces concrete data chunks) and a Workbook parser (which does excel-specific parsing).\n\n`.SheetNames` is an ordered list of the sheets in the workbook\n \n`.Sheets[sheetname]` returns a data structure representing the sheet\n\n`.Sheets[sheetname][address].val` returns the value of the cell.  Types are currently not recorded (but Number and RkNumber show up as javascript Numbers).\n\n## Test Files\n\nTest files are housed in [another repo](https://github.com/Niggler/test_files).\n\nRunning `make init` will refresh the `test_files` submodule and get the files.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly granted by the Apache 2.0 license are reserved by the Original Author.\n\nAll code shared between this and the XLSX project (of the same author) fall \nunder the licensing of the latter project.\n\nIt is the opinion of the Original Author that this code conforms to the terms of the Microsoft Open Specifications Promise, falling under the same terms as OpenOffice (which is governed by the Apache License v2).  Given the vagaries of the promise, the Original Author makes no legal claim that in fact end users are protected from future actions.  It is highly recommended that, for commercial uses, you consult a lawyer before proceeding.\n\n## XLSX Support\n\nXLSX is not supported in this module.  Due to Licensing issues [that are discussed in more detail elsewhere](https://github.com/Niggler/js-xls/issues/1#issuecomment-13852286), the implementation cannot be released in a GPL or MIT-style license.  If you need XLSX support, consult [my js-xlsx project](https://github.com/Niggler/js-xlsx).\n\n## References\n\n - [MS-CFB]: Compound File Binary File Format\n - [MS-XLS]: Excel Binary File Format (.xls) Structure Specification\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n - [MS-ODATA]: Open Data Protocol (OData)\n - [MS-OFFCRYPTO]: Office Document Cryptography Structure\n - [MS-OLEDS]: Object Linking and Embedding (OLE) Data Structures\n - [MS-OLEPS]: Object Linking and Embedding (OLE) Property Set Data Structures\n - [MS-OSHARED]: Office Common Data Types and Objects Structures\n - [MS-OVBA]: Office VBA File Format Structure \n\n",
  "readmeFilename": "README.md",
  "_id": "xlsjs@0.4.0",
  "dist": {
    "shasum": "5c80f55307ecaf6314b884535b02720ccf54e49e"
  },
  "_from": "xlsjs@",
  "_resolved": "https://registry.npmjs.org/xlsjs/-/xlsjs-0.4.0.tgz"
}
